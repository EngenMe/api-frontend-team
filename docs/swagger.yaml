basePath: /api/v1
definitions:
  controller.RefreshTokenRequest:
    properties:
      refreshToken:
        type: string
    type: object
  dto.GetUserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    type: object
  dto.RefreshTokenResonse:
    properties:
      access:
        $ref: '#/definitions/dto.TokenPair'
      refresh:
        $ref: '#/definitions/dto.TokenPair'
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    type: object
  dto.TokenPair:
    properties:
      expires:
        type: string
      token:
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    type: object
  dto.UpdateUserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Authorization header with Bearer token
  title: wiki auth-service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RefreshTokenResonse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Login
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh JWT token
      parameters:
      - description: Refresh token request
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/controller.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RefreshTokenResonse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Refresh Token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
      summary: Register
      tags:
      - auth
  /user/me:
    delete:
      consumes:
      - application/json
      description: Delete user profile
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Delete user profile
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserResponse'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Get user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user profile
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: Update user profile
      tags:
      - User
swagger: "2.0"
